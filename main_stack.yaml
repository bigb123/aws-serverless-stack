---
AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: >
  Cloudformation template of the stack responsible for Lambda, DynamoDB table,
  Api Gateway, VPC and all required resources creation.


##############################
#
# Parameters
#
##############################

Parameters:
  VpcCidrBlock:
    Description: IP addresses pool
    Type: String
    Default: 10.0.0.0/16

  ProductionVpcName:
    Description: Name of VPC with production resources.
    Type: String
    Default: ProductionVpc

  DevelopmentVpcName:
    Description: Name of VPC with production resources.
    Type: String
    Default: DevelopmentVpc


##############################
#
# Globals
#
##############################

Globals:
  Function:
    Runtime: python3.7
    Handler: index.handler

  Api:
    EndpointConfiguration: REGIONAL





##############################
#
# Resources
#
##############################

Resources:

  ###
  # VPCs
  ###

  ProductionVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      Tags:
        - Key: Name
          Value: !Ref ProductionVpcName

  DevelopmentVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      Tags:
        - Key: Name
          Value: !Ref DevelopmentVpcName

  ###
  # Subents
  ###

  ###
  # Roles
  ###

  # Lambda role
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Lambda_role
      Policies:
        -
          PolicyName: Lambda_policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
            -
              Effect: Allow
              Action:
                - logs:CreateLogGroup
              Resource:
                - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
            -
              Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource:
                - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole


  ###
  #
  # Lambdas
  #
  ###

  ###
  # Lambda function to handle GET request
  ###

  LambdaGet:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: LambdaGet
      Description: Lambda function that responds for Api Gateway Get request
      Role: !GetAtt LambdaRole.Arn
      # VpcConfig: For Development and another one for production
      Policies:
        - AmazonDynamoDBReadOnlyAccess
      Events:
        GetValues:
          Type: Api # Implicitly creating ApiGateway
          Properties:
            Path: /
            Method: get
      InlineCode: |
        import json

        def handler(event, context):
          # Here should be some code to read from DynamoDB
            return {
                'statusCode': 200,
                'body': json.dumps('Records from DynamoDB')
            }

  LambdPost:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: LambdaPost
      Description: Lambda function that responds for Api Gateway POST request
      Role: !GetAtt LambdaRole.Arn
      # VpcConfig: For Development and another one for production
      Policies:
        - AmazonDynamoDBFullAccess
      Events:
        GetValues:
          Type: Api # Implicitly creating ApiGateway
          Properties:
            Path: /
            Method: post
      InlineCode: |
        import json

        def handler(event, context):
          # Here should be some code to write to DynamoDB
            return {
                'statusCode': 200,
                'body': json.dumps('Write to DynamoDB')
            }

  DynamoDBTable:
    Type: AWS::Serverless::SimpleTable
